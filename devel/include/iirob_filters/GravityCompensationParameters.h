// *********************************************************
//
// File autogenerated for the iirob_filters package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosparam_handler/utilities.hpp>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <iirob_filters/GravityCompensationConfig.h>
#else
struct GravityCompensationConfig{};
#endif


namespace iirob_filters {

/// \brief Parameter struct generated by rosparam_handler
struct GravityCompensationParameters {

  using Config = GravityCompensationConfig;

  GravityCompensationParameters(const ros::NodeHandle& private_node_handle)
  : globalNamespace{"/"},
    privateNamespace{private_node_handle.getNamespace() + "/"},
    nodeName{rosparam_handler::getNodeName(private_node_handle)} {}

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosparam_handler::getParam(privateNamespace + "world_frame", world_frame, std::string{""});
    success &= rosparam_handler::getParam(privateNamespace + "sensor_frame", sensor_frame, std::string{""});
    success &= rosparam_handler::getParam(privateNamespace + "CoG_x", CoG_x, double{0});
    success &= rosparam_handler::getParam(privateNamespace + "CoG_y", CoG_y, double{0});
    success &= rosparam_handler::getParam(privateNamespace + "CoG_z", CoG_z, double{0});
    success &= rosparam_handler::getParam(privateNamespace + "force", force, double{0});

    if(!success){
      missingParamsWarning();
      rosparam_handler::exit("RosparamHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
  rosparam_handler::setParam(privateNamespace + "world_frame",world_frame);
  rosparam_handler::setParam(privateNamespace + "sensor_frame",sensor_frame);
  rosparam_handler::setParam(privateNamespace + "CoG_x",CoG_x);
  rosparam_handler::setParam(privateNamespace + "CoG_y",CoG_y);
  rosparam_handler::setParam(privateNamespace + "CoG_z",CoG_z);
  rosparam_handler::setParam(privateNamespace + "force",force);        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND
    world_frame = config.world_frame;
    sensor_frame = config.sensor_frame;
    CoG_x = config.CoG_x;
    CoG_y = config.CoG_y;
    CoG_z = config.CoG_z;
    force = config.force;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosparam_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const GravityCompensationParameters& p)
  {
    os << "[" << p.nodeName << "]\nNode " << p.nodeName << " has the following parameters:\n"
      << "	" << p.privateNamespace << "world_frame:" << p.world_frame << "\n"
      << "	" << p.privateNamespace << "sensor_frame:" << p.sensor_frame << "\n"
      << "	" << p.privateNamespace << "CoG_x:" << p.CoG_x << "\n"
      << "	" << p.privateNamespace << "CoG_y:" << p.CoG_y << "\n"
      << "	" << p.privateNamespace << "CoG_z:" << p.CoG_z << "\n"
      << "	" << p.privateNamespace << "force:" << p.force << "\n"
;
    return os;
  }

    std::string world_frame; /*!< refrence coordinate system */
  std::string sensor_frame; /*!< sensor coordinate system */
  double CoG_x; /*!< value */
  double CoG_y; /*!< value */
  double CoG_z; /*!< value */
  double force; /*!< value */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }

  const std::string globalNamespace;
  const std::string privateNamespace;
  const std::string nodeName;
};

} // namespace iirob_filters
