// *********************************************************
//
// File autogenerated for the iirob_filters package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosparam_handler/utilities.hpp>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <iirob_filters/LowPassFilterConfig.h>
#else
struct LowPassFilterConfig{};
#endif


namespace iirob_filters {

/// \brief Parameter struct generated by rosparam_handler
struct LowPassFilterParameters {

  using Config = LowPassFilterConfig;

  LowPassFilterParameters(const ros::NodeHandle& private_node_handle)
  : globalNamespace{"/"},
    privateNamespace{private_node_handle.getNamespace() + "/"},
    nodeName{rosparam_handler::getNodeName(private_node_handle)} {}

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosparam_handler::getParam(privateNamespace + "SamplingFrequency", SamplingFrequency, double{0});
    success &= rosparam_handler::getParam(privateNamespace + "DampingFrequency", DampingFrequency, double{0});
    success &= rosparam_handler::getParam(privateNamespace + "DampingIntensity", DampingIntensity, double{0});
    success &= rosparam_handler::getParam(privateNamespace + "divider", divider, int{1});

    if(!success){
      missingParamsWarning();
      rosparam_handler::exit("RosparamHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
  rosparam_handler::setParam(privateNamespace + "SamplingFrequency",SamplingFrequency);
  rosparam_handler::setParam(privateNamespace + "DampingFrequency",DampingFrequency);
  rosparam_handler::setParam(privateNamespace + "DampingIntensity",DampingIntensity);
  rosparam_handler::setParam(privateNamespace + "divider",divider);        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND
    SamplingFrequency = config.SamplingFrequency;
    DampingFrequency = config.DampingFrequency;
    DampingIntensity = config.DampingIntensity;
    divider = config.divider;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosparam_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const LowPassFilterParameters& p)
  {
    os << "[" << p.nodeName << "]\nNode " << p.nodeName << " has the following parameters:\n"
      << "	" << p.privateNamespace << "SamplingFrequency:" << p.SamplingFrequency << "\n"
      << "	" << p.privateNamespace << "DampingFrequency:" << p.DampingFrequency << "\n"
      << "	" << p.privateNamespace << "DampingIntensity:" << p.DampingIntensity << "\n"
      << "	" << p.privateNamespace << "divider:" << p.divider << "\n"
;
    return os;
  }

    double SamplingFrequency; /*!< sampling frequency */
  double DampingFrequency; /*!< sampling frequency */
  double DampingIntensity; /*!< sampling frequency */
  int divider; /*!< divider */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }

  const std::string globalNamespace;
  const std::string privateNamespace;
  const std::string nodeName;
};

} // namespace iirob_filters
